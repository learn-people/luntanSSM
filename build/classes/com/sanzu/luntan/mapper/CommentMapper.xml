<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!--
  1.在这里首先需要关注的一点是namespace，每一个mapper有一个唯一指定的namespace，一般采用包名+mapper的文件名。
	之后再操作数据库时就通过namespace+select的id 这种方式来操作。
  2.mapper内包裹的就是一系列的数据库操作。
  3.<select> 中 id用于 配合namespace定位到具体操作。
  4.parameterType表示参数类型，参数就被传递到#{}所在的地方。
  5.resultType代表了数据的返回类型，这里返回类型就是那个与数据库表信息对应的类 。
-->
<!-- 管理员 -->
<mapper namespace="com.sanzu.luntan.mapper.CommentMapper">
  <!-- 查找 -->
  <select id="findCommentById" resultType="com.sanzu.luntan.pojo.Comment">
  	SELECT
	`comment`.id,
	post.id AS postId,
	`comment`.userNum,
	`user`.userName,
	`user`.imgUrl AS userImgUrl,
	`comment`.commentContent,
	`comment`.commentLikeNum,
	`comment`.commentTime,
	`comment`.imgUrl
	FROM
	`comment`
	INNER JOIN `user` ON `comment`.userNum = `user`.userNumber
	INNER JOIN post ON `comment`.postId = post.id
	where postId=#{id}
	ORDER BY  `comment`.commentTime ASC
  </select>
  <!-- 查找全部 -->
  <select id="queryCommentAll" resultType="com.sanzu.luntan.pojo.Comment">
  	SELECT
	`comment`.id,
	post.id AS postId,
	`comment`.userNum,
	`user`.userName,
	`user`.imgUrl AS userImgUrl,
	`comment`.commentContent,
	`comment`.commentLikeNum,
	`comment`.commentTime,
	`comment`.imgUrl
	FROM
	`comment`
	INNER JOIN `user` ON `comment`.userNum = `user`.userNumber
	INNER JOIN post ON `comment`.postId = post.id
  </select>
  <!-- 模糊查找 -->
  <select id="queryCommentById" parameterType="String" resultType="com.sanzu.luntan.pojo.Comment">
  	select * from comment where id like '%${value}%'
  </select>
  <!-- 添加评论 -->
  <insert id="insertComment" parameterType="com.sanzu.luntan.pojo.Comment" >
  	insert into comment(postId,userNum,commentContent,commentTime,imgUrl) values(#{postId},#{userNum},#{commentContent},#{commentTime},#{imgUrl})
  </insert>
  <!-- 更新评论信息 -->
  <update id="updateComment" parameterType="com.sanzu.luntan.pojo.Comment">
  	<!-- 记得使用逗号隔开 -->
  	update comment set commentContent=#{commentContent}, imgUrl=#{imgUrl} where id=#{id}
  </update>
  <!-- 单个删除服务于移动端 -->
 <delete id="deleteCommentOne" parameterType="com.sanzu.luntan.pojo.Comment">
  	delete from comment where id=#{id} and userNum=#{userNum}
  </delete>
  <!-- 单个删除服务于后台 -->
 <delete id="deleteComment" parameterType="int">
  	delete from comment where id=#{id}
  </delete>
  <!-- 批量删除 -->
  <delete id="deleteCommentAll" parameterType="String">
  <!-- 前端封装的是一个list，利用Mybatis给我们的封装进行XML配置，将我们的XML中collection属性值设置为list -->
  	delete from comment where id in(
  		<foreach collection="list" item="id" separator=",">
  			#{id}
  		</foreach>
  	)
  </delete>
</mapper>