<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!--
  1.在这里首先需要关注的一点是namespace，每一个mapper有一个唯一指定的namespace，一般采用包名+mapper的文件名。
	之后再操作数据库时就通过namespace+select的id 这种方式来操作。
  2.mapper内包裹的就是一系列的数据库操作。
  3.<select> 中 id用于 配合namespace定位到具体操作。
  4.parameterType表示参数类型，参数就被传递到#{}所在的地方。
  5.resultType代表了数据的返回类型，这里返回类型就是那个与数据库表信息对应的类 。
-->

<!-- 用户 -->
<mapper namespace="com.sanzu.luntan.mapper.UserMapper">
  <!-- 管理员登录 -->
  <select id="logInUser" parameterType="com.sanzu.luntan.pojo.User" resultType="com.sanzu.luntan.pojo.User">
  	select * from user where userNumber=#{userNumber} and userPassword=#{userPassword}
  </select>
  <!-- 查找单个 -->
  <select id="findUserById" resultType="com.sanzu.luntan.pojo.User">
  	select * from user where id=#{id} or userNumber=#{userNumber} or userName=#{userName}
  </select>
  <!-- 查找全部 -->
  <select id="queryUserAll" resultType="com.sanzu.luntan.pojo.User">
  	select * from user
  </select>
  <!-- 模糊查找 -->
  <select id="queryUserById" parameterType="String" resultType="com.sanzu.luntan.pojo.User">
  	select * from user where id like '%${value}%'
  </select>
  <!-- 用户注册 -->
  <insert id="insertUser" parameterType="com.sanzu.luntan.pojo.User" >
  	insert into user(userNumber,gender,birthday,userPassword,userName,imgUrl) values(#{userNumber},#{gender},#{birthday},#{userPassword},#{userName},#{imgUrl})
  </insert>
  <!-- 校验用户名是否重复 -->
  <select id="checkUserName" parameterType="String" resultType="int">
  	select count(*) from user where userName = #{userName} 
  </select>  
  <!-- 校验账号是否重复 -->
  <select id="checkUserNumber" parameterType="String" resultType="int">
  	select count(*) from user where userNumber = #{userNumber} 
  </select>  
  <!-- 更新密码 -->
  <update id="updateUser" parameterType="com.sanzu.luntan.pojo.User">
  	update user set userPassword=#{userPassword} where id=#{id}
  </update>
  <!-- 更新用户信息 -->
  <update id="updateUserInfo" parameterType="com.sanzu.luntan.pojo.User">
  	<!-- 记得使用逗号隔开 -->
  	update user set userPassword=#{userPassword}, userName=#{userName},gender=#{gender}, birthday=#{birthday}, imgUrl=#{imgUrl}, grade=#{grade}, exp=#{exp}, jurisdiction=#{jurisdiction}, fansNum=#{fansNum}, followsNum=#{followsNum}, postsNum=#{postsNum} where id=#{id}
  </update>
  <!-- 单个删除 -->
 <delete id="deleteUserOne" parameterType="int">
  	delete from user where id=#{id}
  </delete>
  <!-- 批量删除 -->
  <delete id="deleteUserAll" parameterType="String">
  <!-- 前端封装的是一个list，利用Mybatis给我们的封装进行XML配置，将我们的XML中collection属性值设置为list -->
  	delete from user where id in(
  		<foreach collection="list" item="id" separator=",">
  			#{id}
  		</foreach>
  	)
  </delete>
</mapper>